{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Author } from './author.model';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet AuthorService = /*#__PURE__*/(() => {\n  class AuthorService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.url = environment.url + 'authors';\n      this.urlFavorite = environment.url + 'author-favorites';\n    }\n    getAuthor(id) {\n      let author = null;\n      return this.httpClient.get(this.url + '/' + id).pipe(map(dbAuthor => {\n        author = new Author(dbAuthor.id);\n        author.fullName = dbAuthor.fullName;\n        author.image = dbAuthor.image;\n        author.url = 'http://localhost:4200/profile/' + dbAuthor.id;\n        return author;\n      }), catchError(this.handleError));\n    }\n    setAuthor(idAuthor, fullName, image) {\n      let dbAuthor = {\n        'id': idAuthor,\n        'fullName': fullName,\n        'image': image\n      };\n      return this.httpClient.post(this.url, dbAuthor).pipe(catchError(this.handleError));\n    }\n    updateAuthor(idAuthor, fullName, image) {\n      let dbAuthor = {\n        'id': idAuthor,\n        'fullName': fullName,\n        'image': image\n      };\n      return this.httpClient.patch(this.url + '/' + idAuthor, dbAuthor).pipe(catchError(this.handleError));\n    }\n    createFavorite(idAuthor) {\n      let dbAuthorFav = {\n        'id': idAuthor,\n        'twimps': []\n      };\n      return this.httpClient.post(this.urlFavorite, dbAuthorFav).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      let errMsg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n      console.error(errMsg);\n      return throwError(() => errMsg);\n    }\n  }\n  AuthorService.ɵfac = function AuthorService_Factory(t) {\n    return new (t || AuthorService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  AuthorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorService,\n    factory: AuthorService.ɵfac\n  });\n  return AuthorService;\n})();\nexport { AuthorService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}