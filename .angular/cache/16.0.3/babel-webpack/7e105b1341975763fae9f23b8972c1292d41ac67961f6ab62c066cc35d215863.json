{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Author } from '../author/author.model';\nimport { Twimp } from './twimp.model';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet TwimpService = /*#__PURE__*/(() => {\n  class TwimpService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.url = environment.url + 'twimps';\n      this.urlFavorite = environment.url + 'author-favorites';\n    }\n    getTwimps() {\n      let twimps = [];\n      return this.httpClient.get(this.url).pipe(map(dbTwimpList => {\n        for (let i in dbTwimpList) {\n          let twimp = new Twimp(dbTwimpList[i].id, 'localhost:4200/twimp/' + dbTwimpList[i].id, new Author(dbTwimpList[i].author), dbTwimpList[i].content, dbTwimpList[i].timestamp);\n          twimps.push(twimp);\n        }\n        return twimps;\n      }), catchError(this.handleError));\n    }\n    getAuthorTwimps(idAuthor) {\n      let twimps = [];\n      return this.httpClient.get(this.url).pipe(map(dbTwimpList => {\n        for (let i in dbTwimpList) {\n          if (dbTwimpList[i].author === idAuthor) {\n            let twimp = new Twimp(dbTwimpList[i].id, 'localhost:4200/twimp/' + dbTwimpList[i].id, new Author(dbTwimpList[i].author), dbTwimpList[i].content, dbTwimpList[i].timestamp);\n            twimps.push(twimp);\n          }\n        }\n        return twimps;\n      }), catchError(this.handleError));\n    }\n    setTwimp(twimp) {\n      let dbTwimp = {\n        'id': twimp.id,\n        'author': twimp.author.id,\n        'by': twimp.author.fullName,\n        'content': twimp.content,\n        'timestamp': twimp.timestamp\n      };\n      return this.httpClient.post(this.url, dbTwimp).pipe(catchError(this.handleError));\n    }\n    getFavoritesByAuthor(idAuthor, idTwimp) {\n      return this.httpClient.get(this.urlFavorite + '/' + idAuthor).pipe(map(response => {\n        let favorites = response['twimps'];\n        if (favorites.indexOf(idTwimp) == -1) {\n          return false;\n        } else {\n          return true;\n        }\n      }), catchError(this.handleError));\n    }\n    handleError(error) {\n      let errMsg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n      console.error(errMsg);\n      return throwError(() => errMsg);\n    }\n  }\n  TwimpService.ɵfac = function TwimpService_Factory(t) {\n    return new (t || TwimpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  TwimpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TwimpService,\n    factory: TwimpService.ɵfac\n  });\n  return TwimpService;\n})();\nexport { TwimpService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}