{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Author } from './author.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthorService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = 'http://localhost:3000/authors';\n    this.urlFavorite = 'http://localhost:3000/author-favorites';\n  }\n  getAuthor(id) {\n    let author = null;\n    return this.httpClient.get(this.url + '/' + id).pipe(map(dbAuthor => {\n      author = new Author(dbAuthor.id);\n      author.fullName = dbAuthor.fullName;\n      author.image = dbAuthor.image;\n      author.url = 'http://localhost:4200/author/' + dbAuthor.id;\n      return author;\n    }), catchError(this.handleError));\n  }\n  setAuthor(idAuthor, fullName, image) {\n    let dbAuthor = {\n      'id': idAuthor,\n      'fullName': fullName,\n      'image': image\n    };\n    return this.httpClient.post(this.url, dbAuthor).pipe(catchError(this.handleError));\n  }\n  createFavorite(idAuthor) {\n    let dbAuthorFav = {\n      'id': idAuthor,\n      'twimps': []\n    };\n    return this.httpClient.post(this.urlFavorite, dbAuthorFav).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errMsg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg);\n    return throwError(() => errMsg);\n  }\n}\nAuthorService.ɵfac = function AuthorService_Factory(t) {\n  return new (t || AuthorService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorService,\n  factory: AuthorService.ɵfac\n});\nexport { AuthorService };","map":{"version":3,"names":["throwError","catchError","map","Author","AuthorService","constructor","httpClient","url","urlFavorite","getAuthor","id","author","get","pipe","dbAuthor","fullName","image","handleError","setAuthor","idAuthor","post","createFavorite","dbAuthorFav","error","errMsg","message","status","statusText","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["C:\\Users\\xjuli\\Escritorio\\Programacion\\Angular\\Tweempus\\src\\app\\shared\\author\\author.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { Author } from './author.model';\r\n\r\n@Injectable()\r\nexport class AuthorService {\r\n\r\n  private url: string = 'http://localhost:3000/authors';\r\n  private urlFavorite: string = 'http://localhost:3000/author-favorites';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getAuthor(id: string): Observable<Author> {\r\n    let author: Author | null = null;\r\n\r\n    return this.httpClient.get<Author>(this.url + '/' + id).pipe(\r\n      map(dbAuthor => {\r\n        author = new Author(dbAuthor.id);\r\n        author.fullName = dbAuthor.fullName;\r\n        author.image = dbAuthor.image;\r\n        author.url = 'http://localhost:4200/author/' + dbAuthor.id;\r\n        return author;\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  setAuthor(idAuthor: string, fullName: string, image: string): Observable<any> {\r\n    let dbAuthor: any = { 'id': idAuthor, 'fullName': fullName, 'image': image };\r\n\r\n    return this.httpClient.post(this.url, dbAuthor).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  createFavorite(idAuthor: string): Observable<any> {\r\n    let dbAuthorFav: any = { 'id': idAuthor, 'twimps': [] };\r\n\r\n    return this.httpClient.post(this.urlFavorite, dbAuthorFav).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  handleError(error: any) {\r\n    let errMsg = (error.message) ? error.message :\r\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n    console.error(errMsg);\r\n    return throwError(() => errMsg);\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,MAAM,QAAQ,gBAAgB;;;AAEvC,MACaC,aAAa;EAKxBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAHtB,KAAAC,GAAG,GAAW,+BAA+B;IAC7C,KAAAC,WAAW,GAAW,wCAAwC;EAExB;EAE9CC,SAASA,CAACC,EAAU;IAClB,IAAIC,MAAM,GAAkB,IAAI;IAEhC,OAAO,IAAI,CAACL,UAAU,CAACM,GAAG,CAAS,IAAI,CAACL,GAAG,GAAG,GAAG,GAAGG,EAAE,CAAC,CAACG,IAAI,CAC1DX,GAAG,CAACY,QAAQ,IAAG;MACbH,MAAM,GAAG,IAAIR,MAAM,CAACW,QAAQ,CAACJ,EAAE,CAAC;MAChCC,MAAM,CAACI,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;MACnCJ,MAAM,CAACK,KAAK,GAAGF,QAAQ,CAACE,KAAK;MAC7BL,MAAM,CAACJ,GAAG,GAAG,+BAA+B,GAAGO,QAAQ,CAACJ,EAAE;MAC1D,OAAOC,MAAM;IACf,CAAC,CAAC,EACFV,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACH;EAEAC,SAASA,CAACC,QAAgB,EAAEJ,QAAgB,EAAEC,KAAa;IACzD,IAAIF,QAAQ,GAAQ;MAAE,IAAI,EAAEK,QAAQ;MAAE,UAAU,EAAEJ,QAAQ;MAAE,OAAO,EAAEC;IAAK,CAAE;IAE5E,OAAO,IAAI,CAACV,UAAU,CAACc,IAAI,CAAC,IAAI,CAACb,GAAG,EAAEO,QAAQ,CAAC,CAACD,IAAI,CAClDZ,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACH;EAEAI,cAAcA,CAACF,QAAgB;IAC7B,IAAIG,WAAW,GAAQ;MAAE,IAAI,EAAEH,QAAQ;MAAE,QAAQ,EAAE;IAAE,CAAE;IAEvD,OAAO,IAAI,CAACb,UAAU,CAACc,IAAI,CAAC,IAAI,CAACZ,WAAW,EAAEc,WAAW,CAAC,CAACT,IAAI,CAC7DZ,UAAU,CAAC,IAAI,CAACgB,WAAW,CAAC,CAC7B;EACH;EAEAA,WAAWA,CAACM,KAAU;IACpB,IAAIC,MAAM,GAAID,KAAK,CAACE,OAAO,GAAIF,KAAK,CAACE,OAAO,GAC1CF,KAAK,CAACG,MAAM,GAAG,GAAGH,KAAK,CAACG,MAAM,MAAMH,KAAK,CAACI,UAAU,EAAE,GAAG,cAAc;IACzEC,OAAO,CAACL,KAAK,CAACC,MAAM,CAAC;IACrB,OAAOxB,UAAU,CAAC,MAAMwB,MAAM,CAAC;EACjC;;AA3CWpB,aAAa,C;mBAAbA,aAAa,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAb5B,aAAa,C;SAAbA,aAAa;EAAA6B,OAAA,EAAb7B,aAAa,CAAA8B;AAAA;SAAb9B,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}