{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Token } from './token.model';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../shared/author/author.service\";\nlet AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(httpClient, router, authorService) {\n      this.httpClient = httpClient;\n      this.router = router;\n      this.authorService = authorService;\n      this.url = environment.url + 'authenticated';\n      this.token = null;\n      const token = localStorage.getItem('token');\n      if (token != null) {\n        let tokenLS = JSON.parse(token);\n        this.token = new Token(tokenLS['_key'], tokenLS['_idAuthor']);\n      }\n    }\n    login(idAuthor) {\n      this.authorService.getAuthor(idAuthor).subscribe(author => {\n        let tokenGenerated = this.generateToken();\n        this.saveSession(tokenGenerated, author.id).subscribe(response => {\n          this.token = new Token(response['id'], response['author']);\n          localStorage.setItem('token', JSON.stringify(this.token));\n          this.router.navigate(['/dashboard']);\n        });\n      });\n    }\n    logout() {\n      this.deleteSession().subscribe(response => {\n        this.token = null;\n        localStorage.removeItem(\"token\");\n        this.router.navigate(['/login']);\n      });\n    }\n    generateToken() {\n      let date = new Date().getTime();\n      let text = \"\";\n      let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      for (var i = 0; i < 5; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n      text += date;\n      return text;\n    }\n    saveSession(tokenGenerated, idAuthor) {\n      let session = {\n        'id': tokenGenerated,\n        'author': idAuthor\n      };\n      return this.httpClient.post(this.url, session).pipe(catchError(this.handleError));\n    }\n    deleteSession() {\n      return this.httpClient.delete(this.url + '/' + this.token.key).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      let errMsg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n      console.error(errMsg);\n      return throwError(() => errMsg);\n    }\n  }\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuthorService));\n  };\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac\n  });\n  return AuthenticationService;\n})();\nexport { AuthenticationService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}