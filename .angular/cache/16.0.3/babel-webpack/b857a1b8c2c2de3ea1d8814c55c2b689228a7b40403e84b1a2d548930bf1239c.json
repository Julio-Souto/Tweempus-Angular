{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { Author } from './author.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthorService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.url = 'http://localhost:3000/authors';\n  }\n  getAuthor(id) {\n    let author = null;\n    return this.httpClient.get(this.url + '/' + id).pipe(map(dbAuthor => {\n      author = new Author(dbAuthor.id);\n      author.fullName = dbAuthor.fullName;\n      author.image = dbAuthor.image;\n      author.url = 'http://localhost:4200/author/' + dbAuthor.id;\n      return author;\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errMsg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg);\n    return throwError(() => errMsg);\n  }\n}\nAuthorService.ɵfac = function AuthorService_Factory(t) {\n  return new (t || AuthorService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorService,\n  factory: AuthorService.ɵfac\n});\nexport { AuthorService };","map":{"version":3,"names":["throwError","catchError","map","Author","AuthorService","constructor","httpClient","url","getAuthor","id","author","get","pipe","dbAuthor","fullName","image","handleError","error","errMsg","message","status","statusText","console","i0","ɵɵinject","i1","HttpClient","factory","ɵfac"],"sources":["C:\\Users\\xjuli\\Escritorio\\Programacion\\Angular\\Tweempus\\src\\app\\shared\\author\\author.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\nimport { Author } from './author.model';\r\n\r\n@Injectable()\r\nexport class AuthorService {\r\n\r\n  private url: string = 'http://localhost:3000/authors';\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  getAuthor(id: string): Observable<Author> {\r\n    let author: Author | null = null;\r\n\r\n    return this.httpClient.get<Author>(this.url + '/' + id).pipe(\r\n      map(dbAuthor => {\r\n        author = new Author(dbAuthor.id);\r\n        author.fullName = dbAuthor.fullName;\r\n        author.image = dbAuthor.image;\r\n        author.url = 'http://localhost:4200/author/' + dbAuthor.id;\r\n        return author;\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  handleError(error: any) {\r\n    let errMsg = (error.message) ? error.message :\r\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n    console.error(errMsg);\r\n    return throwError(() => errMsg);\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAEhD,SAASC,MAAM,QAAQ,gBAAgB;;;AAEvC,MACaC,aAAa;EAIxBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,GAAG,GAAW,+BAA+B;EAEP;EAE9CC,SAASA,CAACC,EAAU;IAClB,IAAIC,MAAM,GAAkB,IAAI;IAEhC,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAS,IAAI,CAACJ,GAAG,GAAG,GAAG,GAAGE,EAAE,CAAC,CAACG,IAAI,CAC1DV,GAAG,CAACW,QAAQ,IAAG;MACbH,MAAM,GAAG,IAAIP,MAAM,CAACU,QAAQ,CAACJ,EAAE,CAAC;MAChCC,MAAM,CAACI,QAAQ,GAAGD,QAAQ,CAACC,QAAQ;MACnCJ,MAAM,CAACK,KAAK,GAAGF,QAAQ,CAACE,KAAK;MAC7BL,MAAM,CAACH,GAAG,GAAG,+BAA+B,GAAGM,QAAQ,CAACJ,EAAE;MAC1D,OAAOC,MAAM;IACf,CAAC,CAAC,EACFT,UAAU,CAAC,IAAI,CAACe,WAAW,CAAC,CAC7B;EACH;EAEAA,WAAWA,CAACC,KAAU;IACpB,IAAIC,MAAM,GAAID,KAAK,CAACE,OAAO,GAAIF,KAAK,CAACE,OAAO,GAC1CF,KAAK,CAACG,MAAM,GAAG,GAAGH,KAAK,CAACG,MAAM,MAAMH,KAAK,CAACI,UAAU,EAAE,GAAG,cAAc;IACzEC,OAAO,CAACL,KAAK,CAACC,MAAM,CAAC;IACrB,OAAOlB,UAAU,CAAC,MAAMkB,MAAM,CAAC;EACjC;;AA1BWd,aAAa,C;mBAAbA,aAAa,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAbtB,aAAa,C;SAAbA,aAAa;EAAAuB,OAAA,EAAbvB,aAAa,CAAAwB;AAAA;SAAbxB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}