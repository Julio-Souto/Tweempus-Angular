{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Token } from './token.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../shared/author/author.service\";\nclass AuthenticationService {\n  constructor(httpClient, router, authorService) {\n    this.httpClient = httpClient;\n    this.router = router;\n    this.authorService = authorService;\n    this.url = 'http://localhost:3000/authenticated';\n    this.token = null;\n  }\n  login(idAuthor) {\n    this.authorService.getAuthor(idAuthor).subscribe(author => {\n      let tokenGenerated = this.generateToken();\n      this.saveSession(tokenGenerated, author.id).subscribe(response => {\n        this.token = new Token(response['id'], response['author']);\n        this.router.navigate(['/dashboard']);\n      });\n    });\n  }\n  logout() {\n    this.deleteSession().subscribe(response => {\n      this.token = null;\n      this.router.navigate(['/login']);\n    });\n  }\n  generateToken() {\n    let date = new Date().getTime();\n    let text = \"\";\n    let possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < 5; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    text += date;\n    return text;\n  }\n  saveSession(tokenGenerated, idAuthor) {\n    let session = {\n      'id': tokenGenerated,\n      'author': idAuthor\n    };\n    return this.httpClient.post(this.url, session).pipe(catchError(this.handleError));\n  }\n  deleteSession() {\n    return this.httpClient.delete(this.url + '/' + this.token.key).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errMsg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg);\n    return throwError(() => errMsg);\n  }\n}\nAuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuthorService));\n};\nAuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.ɵfac\n});\nexport { AuthenticationService };","map":{"version":3,"names":["throwError","catchError","Token","AuthenticationService","constructor","httpClient","router","authorService","url","token","login","idAuthor","getAuthor","subscribe","author","tokenGenerated","generateToken","saveSession","id","response","navigate","logout","deleteSession","date","Date","getTime","text","possible","i","charAt","Math","floor","random","length","session","post","pipe","handleError","delete","key","error","errMsg","message","status","statusText","console","i0","ɵɵinject","i1","HttpClient","i2","Router","i3","AuthorService","factory","ɵfac"],"sources":["C:\\Users\\xjuli\\Escritorio\\Programacion\\Angular\\Tweempus\\src\\app\\core\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { AuthorService } from '../shared/author/author.service';\r\n\r\nimport { Token } from './token.model';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n\r\n  private url: string = 'http://localhost:3000/authenticated';\r\n\r\n  token: Token | null = null;\r\n\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private router: Router,\r\n    private authorService: AuthorService\r\n  ) { }\r\n\r\n  login(idAuthor: string): void {\r\n    this.authorService.getAuthor(idAuthor).subscribe(author => {\r\n      let tokenGenerated = this.generateToken();\r\n      this.saveSession(tokenGenerated, author.id).subscribe((response: any) => {\r\n        this.token = new Token(response['id'], response['author']);\r\n        this.router.navigate(['/dashboard']);\r\n      });\r\n    });\r\n  }\r\n\r\n  logout(): void {\r\n    this.deleteSession().subscribe(response => {\r\n      this.token = null;\r\n      this.router.navigate(['/login']);\r\n    });\r\n  }\r\n\r\n  generateToken(): string {\r\n    let date: number = new Date().getTime();\r\n    let text: string = \"\";\r\n    let possible: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (var i = 0; i < 5; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n\r\n    text += date;\r\n\r\n    return text;\r\n  }\r\n\r\n  saveSession(tokenGenerated: string, idAuthor: string): Observable<Object> {\r\n    let session: Object = { 'id': tokenGenerated, 'author': idAuthor };\r\n\r\n    return this.httpClient.post(this.url, session).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  deleteSession(): Observable<Object> {\r\n    return this.httpClient.delete(this.url + '/' + this.token!.key).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  handleError(error: any) {\r\n    let errMsg = (error.message) ? error.message :\r\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n    console.error(errMsg);\r\n    return throwError(() => errMsg);\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}